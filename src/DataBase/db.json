{
  "blogs": [
    {
      "id": "cb8b",
      "title": "React",
      "content": "This section describes the rules you need to follow to write idiomatic React code. Writing idiomatic React code can help you write well organized, safe, and composable applications. These properties make your app more resilient to changes and makes it easier to work with other developers, libraries, and tools.\n\nThese rules are known as the Rules of React. They are rules – and not just guidelines – in the sense that if they are broken, your app likely has bugs. Your code also becomes unidiomatic and harder to understand and reason about.\n\nWe strongly recommend using Strict Mode alongside React’s ESLint plugin to help your codebase follow the Rules of React. By following the Rules of React, you’ll be able to find and address these bugs and keep your application maintainable.",
      "likes": 24,
      "likedBy": [
        "Aarto "
      ]
    },
    {
      "id": "d478",
      "title": "React",
      "content": "This section describes the rules you need to follow to write idiomatic React code. Writing idiomatic React code can help you write well organized, safe, and composable applications. These properties make your app more resilient to changes and makes it easier to work with other developers, libraries, and tools.\n\nThese rules are known as the Rules of React. They are rules – and not just guidelines – in the sense that if they are broken, your app likely has bugs. Your code also becomes unidiomatic and harder to understand and reason about.\n\nWe strongly recommend using Strict Mode alongside React’s ESLint plugin to help your codebase follow the Rules of React. By following the Rules of React, you’ll be able to find and address these bugs and keep your application maintainable.",
      "likes": 5,
      "author": "Nikita",
      "likedBy": [
        "Nikita",
        "Aarto "
      ]
    },
    {
      "id": "3799",
      "title": "Cypress",
      "content": "The Launchpad presents you with your biggest decision first: What type of testing shall I do? E2E Testing, where I run my whole application and visit pages to test them? Or Component Testing, where I mount individual components of my app and test them in isolation?\n\nFor more background on this critical decision, read Testing Types. Alternatively, if you're not sure which type you want and just want to get on with your testing journey, just choose E2E for now - you can always change this later!",
      "author": "Sanchit",
      "likes": 2,
      "likedBy": [
        "Nikita",
        "Sanchit"
      ]
    },
    {
      "id": "9ecd",
      "title": "React",
      "content": "useRef returns an object with a single property:\n      current: Initially, it's set to the initialValue you have passed. You can later set it to something else.\n       If you pass the ref object to React as a ref attribute to a JSX node, React will set its current property.\n      On the next renders, useRef will return the same object.\n      Caveats: You can mutate the ref.current property. Unlike state, it is mutable. However, \n      if it holds an object that is used for rendering \n      (for example, a piece of your state), then you shouldn’t mutate that object.\n      When you change the ref.current property, React does not re-render your component.\n       React is not aware of when you change it because a ref is a plain JavaScript object.\n      Do not write or read ref.current during rendering, except for initialization.\n       This makes your component’s behavior unpredictable.\n      In Strict Mode, React will call your component function twice in order to help you find accidental impurities.\n       This is development-only behavior and does not affect production.\n      Each ref object will be created twice, but one of the versions will be discarded. \n      If your component function is pure (as it should be), this should not affect the behavior.\n      ",
      "author": "Anonymous",
      "likes": 0,
      "likedBy": []
    }
  ],
  "user": [
    {
      "id": "1",
      "name": "John",
      "password": "123"
    },
    {
      "id": "d665",
      "name": "Aarto ",
      "password": "123"
    },
    {
      "id": "d3a8",
      "name": "Tanu",
      "password": "123"
    },
    {
      "id": "4a84",
      "name": "Nikita",
      "password": "sanchit"
    },
    {
      "id": "dd2c",
      "name": "arun",
      "password": "1234"
    },
    {
      "id": "3199",
      "name": "Sanchit",
      "password": "123"
    }
  ]
}